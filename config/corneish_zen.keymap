/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define SELECT_WORD_DELAY 1
#define _HOME LC(LEFT)
#define _END LC(RIGHT)

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        shm: shift_hr_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            label = "Shift HR Mod";
        };
    };

    combos {
        compatible = "zmk,combos";

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <16 15>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <19 20>;
        };

        LeftBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <5 4>;
        };

        LeftBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
        };

        LeftParenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <28 29>;
        };

        RightBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <6 7>;
        };

        RightBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
        };

        RightParenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <30 31>;
        };

        DoubleQuotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <28 27>;
        };

        Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <31 32>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <22 23>;
        };

        Word-Delete {
            bindings = <&kp LC(DEL)>;
            key-positions = <11 23>;
        };

        WordBackspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <0 12>;
        };

        selectline {
            bindings = <&select_line>;
            key-positions = <36 37>;
        };

        selectword {
            bindings = <&select_word>;
            key-positions = <40 41>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  |   |
            // | TAB  |  A  |  S  |  D* |  F* |  G  |   |  H  |  J*  |  K* |  L  |  ;  |  '   |
            // | CTRL |  Z* |  X* |  C  |  V  |  B  |   |  N  |  M   |  ,* |  .* |  /  | EQUAL|
            //                    |BKSP |LWR* |ENT* |   | SPC | RSE* |DEL* |

            bindings = <
&kp ESC    &kp Q           &kp W           &kp E                     &kp R          &kp T         &kp Y      &kp U         &kp I          &kp O            &kp P                    &kp BSPC
&kp TAB    &hm LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D        &shm LSHIFT F  &kp G         &kp H      &shm RSHFT J  &hm RCTRL K    &hm RIGHT_ALT L  &hm RIGHT_GUI SEMICOLON  &kp SQT
&kp LCTRL  &kp Z           &kp X           &kp C                     &kp V          &kp B         &kp N      &kp M         &kp COMMA      &kp DOT          &kp SLASH                &kp RSHFT
                                           &hm LEFT_SHIFT BACKSPACE  &lt 1 ESC      &kp RETURN    &kp SPACE  &lt 2 TAB     &hm RCTRL DEL
            >;
        };

        lower_layer {
            display-name = "NUMBER";

            // Lower
            //  ,-----------------------------------------------------.                    ,-----------------------------------------------------.
            //  |    ▼   | CAPSLCK|  Home  |   ↑    |   Pg↑  |   {    |                    |    }   |   7    |   8    |   9    |   +    |  Del   |
            //  |--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
            //  |    ▼   | NUMLCK |   ←    │   ↓    │    →   |   [    |                    |    ]   |   4    |   5    |   6    |   -    |   =    |
            //  |--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
            //  |    ▼   |        |  End   |  SAVE  |   Pg↓  |   (    |                    |    )   |   1    |   2    |   3    |   *    |   ▼    |
            //  `--------+--------+--------+--------+--------+--------+--------.  .--------+--------+--------+--------+--------+--------+--------'
            //                                      |    ▼   |   ▼    |    ▼   |  |   -    | Adjust |   0    |
            //                                      `--------------------------'  `--------------------------'

            bindings = <
&select_word  &kp CAPSLOCK    &kp HOME  &kp UP     &kp PG_UP      &kp LBRC    &kp RBRC  &kp N7  &kp N8  &kp N9  &kp PLUS      &kp LC(BSPC)
&extend_word  &kp KP_NUMLOCK  &kp LEFT  &kp DOWN   &kp RIGHT      &kp LBKT    &kp RBKT  &kp N4  &kp N5  &kp N6  &kp MINUS     &kp EQUAL
&trans        &kp LS(F10)     &kp END   &kp LC(S)  &kp PAGE_DOWN  &kp LPAR    &kp RPAR  &kp N1  &kp N2  &kp N3  &kp ASTERISK  &trans
                                        &trans     &trans         &trans      &trans    &mo 3   &kp N0
            >;
        };

        raise_layer {
            display-name = "SYMBOL";

            // Raise
            //  ,-----------------------------------------------------.                    ,-----------------------------------------------------.
            //  |   ~    |    !   |   @    |   #    |   $    |   %    |                    |    ^   │    Ü   │    &   │    Ö   │    °   │   Del  |
            //  |--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
            //  |        │    Ä   │   SZ   │   è    │   é    │    ç   │                    │    /   │    £   │    €   │        │    µ   │        |
            //  |--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
            //  |        │        │        │        │        │        │                    │    |   │        │    ²   │   ³    │        │        │
            //  `--------+--------+--------+--------+--------+--------+--------.  .--------+--------+--------+--------+--------+--------+--------'
            //                                      |        │ ADJUST │    -   │  │    ▼   │    ▼   │    ▼   │
            //                                      `--------------------------'  `--------------------------'

            bindings = <
&kp GRAVE  &kp EXCL     &kp AT      &kp HASH       &kp DLLR       &kp PRCNT                &kp CARET  &kp RA(Y)       &kp AMPS      &kp RA(P)       &kp RA(LS(COMMA))  &select_line
&trans     &kp RA(Q)    &kp RA(S)   &kp RA(F)      &kp RA(G)      &kp TILDE                &kp BSLH   &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &extend_line
&trans     &kp LS(F10)  &kp LS(F6)  &kp LA(LC(L))  &kp LC(LS(V))  &kp RA(RS(SEMICOLON))    &kp PIPE   &kp LC(LS(M))   &kp RA(N2)    &kp RA(N3)      &kp RA(NUMBER_5)   &trans
                                    &trans         &mo 3          &trans                   &trans     &trans          &trans
            >;
        };

        // Adjust
        //  ,-----------------------------------------------------.                    ,-----------------------------------------------------.
        //  | Reset  |        |        |        |        | Print  |                    |  MUTE  |   F7   |   F8   |   F9   |  F12   |   ▼    |
        //  |--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
        //  | BT CLR |  BT 0  |  BT 1  |  BT 2  |  BT 3  |  BT 4  |                    |  VOL↑  |   F4   |   F5   |   F6   |  F11   |   ▼    |
        //  |--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
        //  |        |        |  Next  |  Play  |  Prv   |        |                    |  VOL↓  |   F1   |   F2   |   F3   |  F10   |   ▼    |
        //  `--------+--------+--------+--------+--------+--------+--------.  .--------+--------+--------+--------+--------+--------+--------'
        //                                      │    ▼   │    ▼   │    ▼   │  │    ▼   │    ▼   │    ▼   │
        //                                      `--------------------------'  `--------------------------'

        layer_3 {
            bindings = <
&trans      &kp CAPSLOCK  &kp KP_NUMLOCK  &kp SCROLLLOCK  &kp PSCRN     &none           &kp C_MUTE    &kp F7  &kp F8  &kp F9  &kp F12  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOL_UP  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans      &none         &none           &none           &none         &none           &kp C_VOL_DN  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                          &trans          &trans        &trans          &trans        &trans  &trans
            >;
        };
    };

    macros {
        // source: https://github.com/sunaku/glove80-keymaps/blob/f22a249a16d83a808eba6dd3e2133c6eae206ea6/keymap.dtsi.erb#L1075-L1080
        //////////////////////////////////////////////////////////////////////////
        //
        // Approximation of Pascal Getreuer's Select Word macro from QMK
        // - https://getreuer.info/posts/keyboards/select-word/index.html
        //
        //////////////////////////////////////////////////////////////////////////
        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //

        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        ZMK_MACRO(select_none,

        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;

        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;

        )

        ZMK_MACRO(

        select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;

        )

        //
        // extend current selection by one word
        //

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(LS(RIGHT))>;

        )
        ZMK_MACRO(

        extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LC(LS(LEFT))>;

        )

        //
        // select current line
        //

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _HOME &kp LS(_END)>;

        )

        ZMK_MACRO(

        select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _END &kp LS(_HOME)>;

        )

        //
        // extend current selection by one line
        //

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            label = "NEW_BEHAVIOR";
        };

        ZMK_MACRO(

        extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(_END)>;

        )
        ZMK_MACRO(

        extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(_HOME)>;

        )
    };
};
